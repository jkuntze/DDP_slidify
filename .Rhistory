hatvalues(lm(y~x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?dfbeta
inflm.SR<-influence.measures(lm(y~x))
which(apply(inflm.SR$is.inf, 1, any))
summary(inflm.SR)
dfbetas(infllm.SR)
dfbetas(inflm.SR)
dfbetas(lm(y~x),inflm.SR)
dfbeta(lm(y~x))
dfbetas(lm(y~x))
library(swirl)
install.packages("UsingR")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline
| <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit<-lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1].
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope<-fit$coef[2]
#Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
#left side of eqn is the sum of squares of residuals of the tweaked regression line
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
#right side of eqn is the sum of squares of original residuals + sum of squares of two tweaks
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
lhs-rhs
all.equal(lhs,rhs)
varChild<-var(galton$chils)
varChild<-var(galton$child)
varRes<-var(fit$Residuals)
varRes<-var(fit$residuals)
?est
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,vaRes+varEst)
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(fit$residuals,attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor<-lm(gch_nor~pga_nor)
l_nor<-lm(gch_nor~gpa_nor)
exit
q
?q
quit("yes")
data(mtcars)
mtcars$am<-factor(mtcars$am, c(0,1), c("Auto","Manual"))
with(mtcars, boxplot(mpg ~ am, xlab = ))
with(mtcars, boxplot(mpg ~ am, xlab = am)
)
with(mtcars, boxplot(mpg ~ am, xlab = "Transmission type"))
with(mtcars, boxplot(mpg ~ am, main = "Boxplot of MPG", xlab = "Transmission type", ylab = "MPG"))
par(mfrow = c(2, 1), mar = c(4, 4, 1, 1))
hist(subset(mtcars, am == 0)$mpg, breaks = seq(10,36,3), col = "green", main = "Histogram of MPG", xlab = "Automatic")
hist(subset(mtcars, am == 1)$mpg, breaks = seq(10,36,3), col = "green", main = "", xlab = "Manual")
par(mfrow = c(2, 1), mar = c(4, 4, 1, 1))
hist(subset(mtcars, am == "Auto")$mpg, breaks = seq(10,36,3), col = "green", main = "Histogram of MPG", xlab = "Automatic")
hist(subset(mtcars, am == "Manual")$mpg, breaks = seq(10,36,3), col = "green", main = "", xlab = "Manual")
hh <- hclust(dist(mtcars))
mtcarsOrdered <- mtcars[hh$order, ]
svd1 <- svd(scale(mtcarsOrdered))
par(mfrow = c(1, 2)) image(t(mtcarsOrdered)[, nrow(mtcarsOrdered):1])
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
install.packages("impute")
sapply(mtcars,is.na)
a<-dist(mtcars)
data(mtcars)
hh <- hclust(dist(mtcars))
mtcarsOrdered <- mtcars[hh$order, ]
svd1 <- svd(scale(mtcarsOrdered))
par(mfrow = c(1, 2)) image(t(mtcarsOrdered)[, nrow(mtcarsOrdered):1])
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
image(t(mtcarsOrdered)[, nrow(mtcarsOrdered):1])
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
names(mtcarsOrdered)
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Percent of variance explained", pch = 19)
fit1<-lm(mpg ~ .,data=mtcars)
summary(fit1)
?mtcars
fit1<-lm(mpg ~ factor(cyl) + disp + hp + drat + wt + qsec + vs + factor(am) + factor(gear) + factor(carb),data=mtcars)
summary(fit1)
summary(mtcars$gear)
summary(mtcars$carb)
names()
names(mtcarsOrdered)
fit2<-lm(mpg ~ factor(cyl)+ disp + factor(am), data = mtcars)
summary(fit2)
fit3<-lm(mpg~factor(am),data=mtcars)
summary(fit3)
fit4<-lm(mpg~factor(cyl)+factor(am),data=mtcars)
summary(fit4)
fit4<-lm(mpg~disp+factor(am),data=mtcars)
summary(fit4)
fit4<-lm(mpg~factor(cyl)+factor(am),data=mtcars)
fit1<-lm(mpg~factor(am),data=mtcars)
fit2<-lm(mpg~factor(cyl)+factor(am),data=mtcars)
fit3<-lm(mpg ~ factor(cyl)+ disp + factor(am), data = mtcars)
fit4<-lm(mpg ~ factor(cyl) + disp + hp + drat + wt + qsec + vs + factor(am) + factor(gear) + factor(carb),data=mtcars)
anova(fit1,fit2,fit3,fit4)
library(swirl)
swirl()
play()
data(galton)
head(galton)
nxt()
fit<-lm(child~parent,data=galton)
play()
?lm
nxt()
fit<-lm(child~parent,galton)
sqrt(1/(dim(galton)[1]-2)*sum(fit$residuals^2))
play()
dim(galton)[1]
sqrt(sum(fit$residuals^2) / (n - 2))
nxt()
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-(galton$child-mu)^2
sTot<-sum((galton$child-mu)^2)
sRes<-deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
play()
?cor
nxt()
with(galton,cor(child,parent))
with(galton,cor(child,parent)^2)
with(galton,cor(parentchild)^2)
with(galton,cor(parent,child)^2)
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
# Regress the given variable on the given predictor,
m(child ~ ones + parent -1, galton)
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",
| trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility˜.,swiss)
lm(Fertility~.,swiss)
all<-lm(Fertility~.,swiss)
summary(all)
summary(lm(Fertility~Agriculture,swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec<-swiss$Examination+swiss$Catholic
efit<-lm(Fertility~.+ec,swiss)
coef(all)[2]-coef(efit)[2]
coef(all)-coef(efit)
play()
coef(all)
coef(efit)
coef(all)-coef(efit)[1:5]
coef(all)-coef(efit)[1:6]
nxt()
coef(all)-coef(efit)[1:6]
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,n=15)
head(InsectSprays,15)
sA
summary(InsectSprays$spray)
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit<-lm(count~spray,InsectSprays)
fit$coef
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1,InsectSprays)
summary(fit)$coef
summary(nfit)$coef
play()
?relevel
str(InsectSprays)
nxt()
spray2<-relevel(InsectSprays$spray,"C")
fit2<-(count~spray,InsectSprays)
fit2<-(count~spray2,InsectSprays)
head(InsectSprays)
fit2<-lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit(Numeric~Year,hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)$coef
lmF<-lm(Numeric~Year,hunger[hunger$Sex=="Female"])
lmF<-lm(Numeric~Year,hunger[hunger$Sex=="Female",])
play()
summary(lmF)$coef
lmF<-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
summary(lmF)$coef
nxt()
lmF<-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM<-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Sex*Year,hunger)
summary(lmInter)
bye()
swirl()
library(swirl)
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno
| <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sqrt(deviance(fit)/(fit$df.residual))
sqrt(deviance(fit)/(df.residual(fir)))
sqrt(deviance(fit)/(df.residual(fit)))
sigma<-(deviance(fit)/(fit$df.residual))
sigma<-(deviance(fit)/(df.residual(fit)))
sigma<-sqrt(deviance(fit)/(fit$df.residual))
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit,
| which=2)
plot(fit, which=2)
sigma1<-sqrt(deviance(fitno)/(fitno$df.residual))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fit, out2)-predict(fitno, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
swirl()
rpg1()
rpg1
rgp1 <- function(){
print("Processing. Please wait.")
# number of samples per simulation
n <- 100
# number of simulations
nosim <- 1000
# set seed for reproducability
set.seed(4321)
# Point A
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
# Point B
betas <- sapply(1 : nosim, function(i)makelms(x1, x2, x3))
round(apply(betas, 1, var), 5)
}
rgp1()
play()
rgp2 <- function(){
print("Processing. Please wait.")
# number of samples per simulation
n <- 100
# number of simulations
nosim <- 1000
# set seed for reproducability
set.seed(4321)
# Point C
x1 <- rnorm(n)
x2 <- x1/sqrt(2) + rnorm(n) /sqrt(2)
x3 <- x1 * 0.95 + rnorm(n) * sqrt(1 - 0.95^2)
# Point D
betas <- sapply(1 : nosim, function(i)makelms(x1, x2, x3))
round(apply(betas, 1, var), 5)
}
nxt()
rgp2()
head(swiss)
mdl<-lm(Fertility˜.,swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
play()
mdl<-lm(Fertility~.-Examination.,swiss)
mdl<-lm(Fertility~.-Examination,swiss)
mdl<-lm(Fertility~.,swiss)
mdl2<-lm(Fertility~.-Examination,swiss)
nxt()
mdl2<-lm(Fertility~.-Examination,swiss)
vif(mdl2)
play()
simbias <- function(seed=8765){
# The default seed guarantees a nice histogram. This is the only
# reason that accepting the default, x1c <- simbias(), is required in the lesson.
# The effect will be evident with other seeds as well.
set.seed(seed)
temp <- rnorm(100)
# Point A
x1 <- (temp + rnorm(100))/sqrt(2)
x2 <- (temp + rnorm(100))/sqrt(2)
x3 <- rnorm(100)
# Function to simulate regression of y on 2 variables.
f <- function(k){
# Point B
y <- x1 + x2 + x3 + .3*rnorm(100)
# Point C
c(lm(y ~ x1 + x2)$coef[2],
lm(y ~ x1 + x3)$coef[2])
}
# Point D
sapply(1:150, f)
}
# Illustrate the effect of bogus regressors on residual squared error.
bogus <- function(){
temp <- swiss
# Add 41 columns of random regressors to a copy of the swiss data.
for(n in 1:41){temp[,paste0("random",n)] <- rnorm(nrow(temp))}
# Define a function to compute the deviance of Fertility regressed
# on all regressors up to column n. The function, deviance(model), computes
# the residual sum of squares of the model given as its argument.
f <- function(n){deviance(lm(Fertility ~ ., temp[,1:n]))}
# Apply f to data from n=6, i.e., the legitimate regressors,
# through n=47, i.e., a full complement of bogus regressors.
rss <- sapply(6:47, f)
# Display result.
plot(0:41, rss, xlab="Number of bogus regressors.", ylab="Residual squared error.",
main="Residual Squared Error for Swiss Data\nUsing Irrelevant (Bogus) Regressors",
pch=21, bg='red')
}
# Plot histograms illustrating bias in estimates of a regressor
# coefficient 1) when an uncorrelated regressor is missing and
# 2) when a correlated regressor is missing.
x1hist <- function(x1c){
p1 <- hist(x1c[1,], plot=FALSE)
p2 <- hist(x1c[2,], plot=FALSE)
yrange <- c(0, max(p1$counts, p2$counts))
plot(p1, col=rgb(0,0,1,1/4), xlim=range(x1c), ylim=yrange, xlab="Estimated coefficient of x1",
main="Bias Effect of Omitted Regressor")
plot(p2, col=rgb(1,0,0,1/4), xlim=range(x1c), ylim=yrange, add=TRUE)
legend(1.1, 40, c("Uncorrelated regressor, x3, omitted", "Correlated regressor, x2, omitted"),
fill=c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)))
}
nxt()
simbias()
x1c<-simbias()
apply(x1c, 1, mean)
fit1<-lm(Fertility~Agriculture, swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education, swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/fit3$df.residuals
play()
fit3$df.residuals
df.residuals(fit3)
nxt()
d<-deviance(fit3)/fit3$df.residual
n<-(deviance(fit1)-deviance(fit3))/(fit1$df.residual-fit3$df.residual)
n.d
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl<-glm(ravenWinNum~ravenScore,binomial,ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
xp(lodds)/(1+exp(lodds))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits
| ~ date, poisson, hits)
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[which.max(hits[,'visits']),]
hits[704,]
lamba<-mdl$fitted.values[704]
lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(symplestatistics ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(simplystats ~ date, poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
exit()
exit
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='report', password='report', dbname='iondata', host='192.168.0.16')
mydb = dbConnect(MySQL(), user='report', password='report', dbname='cedisdata', host='192.168.0.16')
dbListTables(mydb)
dbListFields(mydb, 'vHeatData')
rs = dbSendQuery(mydb, "select * from vHeatData")
data = fetch(rs, n=-1)
head(data)
data
data = fetch(rs)
data
data = fetch(rs,n=3)
data
?fetch
data = fetch(rs, n=-1)
data
rs = dbSendQuery(mydb, "select * from vHeatData")
data = fetch(rs, n=-1)
data
rs = dbSendQuery(mydb, "select * from iondata")
data = fetch(rs, n=-1)
data
rs
rs = dbSendQuery(mydb, "select * from vHeatData")
mydb = dbConnect(MySQL(), user='report', password='report', dbname='cedisdata', host='192.168.0.16')
rs = dbSendQuery(mydb, "select * from vHeatData")
data = fetch(rs, n=-1)
data
exit
mean(mtcars$mpg[which(mtcars$am==0)])
mean(mtcars$mpg[which(mtcars$am==1)])
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/Documents/Coursera/Data Products/")
setwd("./Slidify/")
author("dataset_explorer")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish("jkuntze","https://github.com/jkuntze/test_slidify")
publish("jkuntze","test_slidify")
publish("jkuntze","test_slidify")
publish("jkuntze","test_slidify")
?publish
publish("jkuntze","jkuntze/test_slidify")
publish(user="jkuntze",repo="test_slidify")
slidify('index.Rmd')
publish(user="jkuntze",repo="test_slidify")
names(mtcars)
names(mtcars)[-2]
names(mtcars)[c(-2,-8,-9,-10,-11)]
dataset=mtcars
a<-"mpg"
ggplot(dataset, aes_string(a)) + geom_histogram()
library(ggplot2)
ggplot(dataset, aes_string(a)) + geom_histogram()
shiny::runApp('~/Documents/Coursera/Data Products/Project2')
shiny::runApp('~/Documents/Coursera/Data Products/Project2')
?geom_histogram
?range
range(dataset$mpg)
shiny::runApp('~/Documents/Coursera/Data Products/Project2')
shiny::runApp('~/Documents/Coursera/Data Products/Project2')
shiny::runApp('~/Documents/Coursera/Data Products/Project2')
shiny::runApp('~/Documents/Coursera/Data Products/Project2')
fit<-lm(mpg~gear,data=mtcars)
summary(fit)
str(summary(fit))
str(summary(fit))[-1,-2]
str(summary(fit)[-1,-2])
dim(summary(fit))
class(summary(fit))
b<-summary(fit)
b$call<-NULL
b$terms<-NULL
b
b<-summary(fit)
str(b)
shiny::runApp('~/Documents/Coursera/Data Products/Project2')
shiny::runApp('~/Documents/Coursera/Data Products/Project2')
